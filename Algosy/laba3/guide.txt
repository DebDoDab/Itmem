laba3

Бин поиск или дихотомия

В чом смысол?
Смысл бин поиска в том, что на какой-то НЕПРЕРЫВНО НЕВОЗРАСТАЮЩЕЙ или НЕПРЕРЫВНО НЕУБЫВАЮЩЕЙ (буду говорить ниже именно про неубывающую) функции мы можем найти решение за O(log2(n)) операций. Представим какую-то линейную функцию f(x) = x/4 + 3, чтобы просто было легче понять бинпоиск, можешь даже нарисовать на листике бумаги, никто не зарещает.

Как мы это делаем?
Берем наш изначальный отрезок, смотрим на функцию в середине отрезка. Дальше если мы встретили значение, большее нужного нам, то делаем правую границу отрезка равной этой середине, иначе левую. 
То есть если значение больше нужного в точке m = (l + r) / 2, то на отрезке [m; r] значения тоже будут больше, а вот на отрезок [l; m) нужно посмотреть. То же самое можно сказать про значение меньше.
То есть каждую итерацию (каждый раз) мы делим отрезок на 2 части. Делить будем, пока отрезок не станет длины 1, то есть log2(n) раз.

Давай теперь плавно от функций перейдем к задачам на массивам
Пусть f(x) = array[x], где array - какой-то массив. Поскольку функция должна быть неубывающей, то понятно, что массив должен быть отсортирован.


Давай реализуем бинпоиск на плюсах

int f(vector<int>& a, int x) { //Функция возвращает позицию элемента x в массиве a
								//если такого элемента нет, то возвращаем -1

	int l = 0, r = int(a.size()) - 1; //Возьмем границы l и r - весь массив

	while (l < r) { //Пока наш отрезок не 1 элемент
		int m = (l + r) / 2; //На позиции m стоит средний элемент
		if (a[m] > x) { //Если элемент больше того, что мы ищем
			r = m - 1;
		} else { //Если элемент <=
			l = m;
		}
	}

	return l;
	
}

Тут мы реализовали бинпоиск.
Теперь расскажу интересную штуку: он ломается.
Если отрезок длины 2, то m = (l + r) / 2 будет равен l. Если левый элемент <= x, то мы будем бесконечно делать l = m, то есть не сдвигаться.
Я люблю это исправлять тем, что добавляю сразу после 
int m = (l + r) / 2; 
строчку 
if (m == l) m++;

Финальный код:

int f(vector<int>& a, int x) {
	int l = 0, r = int(a.size()) - 1;
	while (l < r) {
		int m = (l + r) / 2;
		if (m == l) m++;
		if (a[m] > x) {
			r = m - 1;
		} else {
			l = m;
		}
	}
	return l;
}


Теперь несколько вопросов.
Если в массиве a несколько элементов, равных x, то куда будет указывать l и r (Можно на листочке порешать)
.
.
.
.
.
.
На правый, тк если a[m] = x, то l станет равным m, то есть мы сдвигаем левую границу

Давай еще вопрос
int f(vector<int>& a, int x) {
	int l = 0, r = int(a.size()) - 1;
	while (l < r) {
		int m = (l + r) / 2;
		if (a[m] < x) {
			l = m + 1;
		} else {
			r = m;
		}
	}
	return l;
}
Мы тут поменяли if, по сути то же, но куда будет указывать l и r, а также нужна ли строчка if (m == l) m++;?
.
.
.
.
.
.
Уже на левый
Строчка с ифом не нужна, тк на двух элементов m будет равно l, а дальше либо r станет равным m (поменяет значение), либо l станет равен m + 1 (тоже сдвинется)




Вроде все, теперь к задачам

3A.
В первой задаче нам нужно реализовать бин поиск, который укажет на первое вхождение числа в массив, и еще один бин поиск, только указывающий на последнее вхождение числа.
Эти две функции написаны выше, желательно не копипастить или подсматривать, а попытаться самому это дело написать.
Также нужно рассмотреть случаи, когда числа на отрезке нет.

Мой код: https://github.com/DebDoDab/MoeGovno/blob/master/Algosy/laba3/l03z1.cpp


3B.
Вроде что-то посложнее, но если разобраться, то изи.
Сначала подумаем, что вообще нужно бинарить (искать бин поиском).
Поскольку мы можем высчитать высоту элемента на позиции x, только если знаем две высоты рядом (либо x-1 и x+1, либо x-2 и x-1), становится понятно, что бинарить нужно высоту второй лампы. Из высоты первой лампы (дана в условии) и высоты второй лампы (бинарим) сможем вычислить высоту всех остальных ламп.
Теперь давай поймем, что чем выше вторая лампа, тем меньше ламп провалятся под землю.
Давай просто на каждой итерации бинпоиска смотреть, если проваливается (или касается земли) хотя бы одна лампа, то поднимем второй фонарик выше, иначе можно попробовать опустить.

То есть бин поиск будет выглядеть так:

double f(vector<int>& a, h) {
	double l = 0, r = h;
	while (r - l > 0.0001) {
		double m = (l + r) / 2;
		if (check(a, h, m)) {
			r = m;
		} else {
			l = m;
		}
	}
	return l;
}
h - высота первой лампы из условия
check(a, h, m) - какая-то функция, которая будет говорить, проваливаются ли лампы под землю при (высота второй лампы) = m
Еще не забудьте, что f() возратит высоту второй лампы, а нам нужно вывести высоту последней лампы, поэтому нужно будет где-то посчитать эту самую высоту последней лампы

Мой код: https://github.com/DebDoDab/MoeGovno/blob/master/Algosy/laba3/l03z2.cpp



Дальше по расписанию бинарная куча 

Это структура, где каждый родитель имеет до двух сыновей. Каждый сын этой вершины >= самой вершине.
Пусть вершина x, тогда ее левый сын будет x * 2 + 1, а правый x * 2 + 2.
То есть для 0 левый сын 1, а правый 2. Для 1 - 3 и 4, для 2 - 5 и 6, тд......

Для кучи нам нужны две функции: просеивание вверх и вниз.

Просеивание вверх сравнивает вершинку с ее родителем, если наша вершина < родителя, то ее место в куче выше, поэтому поменяем местами родителя и сына, продолжим, пока вершина не дойдет до корня кучи (той вершины, где родителя нет), либо пока мы не встретим родителя, который меньше.

Просеивание вниз сравнивает вершину с минимальным из сыновей, если минимальный сын < этой вершины, то меняем их. Продолжаем, пока вершина не станет листом (без детей), либо пока не встретим таких сыновей, что оба >= нашей вершине.
Тут можно встретиться с вершиной с только одним сыном, поэтому нужно быть осторожным.

Давай реализуем две функции

void siftUp(vector<int>& Heap, int i) { //Проталкивание вверх
    while (i && Heap[i] < Heap[(i - 1) >> 1]) { //Сравниваем с родителем
        swap(Heap[i], Heap[(i - 1) >> 1]); // Меняем
        i = (i - 1) >> 1; //Продолжаем
    }
}

void siftDown(vector<int>& Heap, int i) { //Проталкивание вниз
    while ((i << 1) + 1 < Heap.size()) {
        int j = (i << 1) + 1; //Это левый сын
        if (j + 1 < Heap.size() && Heap[j + 1] < Heap[j]) {
            j++; //Если есть правый сын, и он меньше левого, 
        			//то будем сравнивать с ним
        }
        if (Heap[i] <= Heap[j]) {
            break; //Если сын >=, то останавливаемся
        }
        swap(Heap[i], Heap[j]); //Иначе меняем их
        swap(i, j); //Продолжаем
    }
}

Теперь главное - зачем эти две функции. Они используются при добавлении в кучу элементов и при извлечении минимума оттуда.

Добавление
Давай закинем в самый конец вектора нащ элемент, потом просто поставим его на место с помощью просеивания вверх.

Забираем минимум
Возьмем элемент на позиции 0 (он минимален), потом поставим на верх самый последний элемент, поставим его на место через просеивание вниз.

Почему именно так?
Мы пихаем в конец, а значит высота нашей бинарной кучи всегда будет log2(n).
Из этого вытекает, что просеивания всегда будут работать не больше O(log2(n)) операций.
Вставка элемента тоже за O(log2(n)), извлечение минимума тоже.

Реализуем функции

void add(vector<int>& Heap, int x) {
    Heap.push_back(x);
    siftUp(Heap, Heap.size() - 1);
}

int pop(vector<int>& Heap) {
    int x = Heap[0];
    Heap[0] = Heap.back();
    Heap.erase(Heap.end() - 1);
    siftDown(Heap, 0);
    return x;
}

Тут все легко.



Задачи

3C
Нужно проверить, куча ли наш массив
То есть для каждого x должно соблюдаться условие, что оба сына >= a[x]. Давай не забудем, что у некоторых вершин нет сыновей, либо сын только 1
Делается простым фором по массиву

Мой код: https://github.com/DebDoDab/MoeGovno/blob/master/Algosy/laba3/l03z3.cpp


3D

Нужно написать сортировку кучей.
Давай сначала просто занесем все эти элементы в кучу, а потом просто достанем все элементы из кучи
По сути весь код кучи был написан выше, осталось его переварить, написать.

Мой код: https://github.com/DebDoDab/MoeGovno/blob/master/Algosy/laba3/l03z4.cpp



Последняя задача - radixsort, бесполезная вещь

Нам нужно сначала посортить элементы по последнему символу, потом по предпоследнему, потом по предпредпоследнему и т.д.
Еще нужно сортить их стабильной сортировкой.
У нас строки, а значит буков там всего 28, поэтому используем сортировку подсчетом.
Вроде все, говорить не о чем. Просто нужно нормально реализовать это дело.

Мой код: https://github.com/DebDoDab/MoeGovno/blob/master/Algosy/laba3/l03z5.cpp




Внимание!

Спасибо за внимание!